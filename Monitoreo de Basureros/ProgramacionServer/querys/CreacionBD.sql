/*
Proyecto Recoleccion de basura - Script de creacion de la base de datos 
Estudiantes: Delvis Cruz y Jose Peñalba
*/

--Creando base de datos
CREATE DATABASE DB_RECOLECCION;

--Seleccionando la base de datos donde crear las tablas
USE DB_RECOLECCION;

--Creando tablas de la base de datos
CREATE TABLE TB_USUARIOS(
	ID_USUARIO INT PRIMARY KEY IDENTITY(1, 1),
	USERNAME VARCHAR(30) NOT NULL,
	PASSWD VARCHAR(20) NOT NULL,
	ROL INT NOT NULL
);

CREATE TABLE TB_BASUREROS(
	ID_BASURERO INT PRIMARY KEY IDENTITY(1, 1),
	DETALLE_UBICACION VARCHAR(200) NOT NULL,
	COORDENADAS VARCHAR(100) NOT NULL,
	TIPO_BASURERO SMALLINT NOT NULL,
);

CREATE TABLE TB_DATA_HISTORICA(
	ID_BASURERO INT NOT NULL,
	FECHA_VACIO DATETIME NOT NULL,
	FECHA_LLENADO DATETIME
);

CREATE TABLE TB_REPORTES(
	ID_REPORT INT NOT NULL IDENTITY(1, 1),
	UBICACION_REPORT VARCHAR(100),
	NOMBRE_ARCHIVO VARCHAR(80),
	DETALLES VARCHAR(MAX),
	FECHA DATE
);



--Definiendo restricciones
ALTER TABLE TB_DATA_HISTORICA ADD CONSTRAINT FK_BASURERO_HISTORIA FOREIGN KEY (ID_BASURERO) REFERENCES TB_BASUREROS(ID_BASURERO);


ALTER TABLE TB_BASUREROS ADD NUM_CONTENEDORES TINYINT 

ALTER TABLE TB_USUARIOS ADD NOMBRE VARCHAR(100) 
ALTER TABLE TB_REPORTES ADD TIPO VARCHAR(10)


UPDATE TB_BASUREROS	SET NUM_CONTENEDORES = '2' WHERE ID_BASURERO = 2 

SELECT * FROM TB_USUARIOS

SELECT @@SERVERNAME

CREATE VIEW V_Basureros
AS
SELECT ID_BASURERO, DETALLE_UBICACION, TIPO_BASURERO ,NUM_CONTENEDORES FROM TB_BASUREROS


----------------------------------------------------
--Procedimiento de inicio de session
CREATE PROCEDURE PRO_SESSION (
	@username VARCHAR(50),
	@password VARCHAR(50)
)
AS
BEGIN
	IF @username = '' OR @password = ''
	BEGIN
		RAISERROR ('ERROR EN INICIO DE SESSION', 16, 1);
		RETURN;
	END

	SELECT ID_USUARIO, NOMBRE, ROL FROM TB_USUARIOS
	WHERE USERNAME = @username AND PASSWD = @password;
END;

EXEC PRO_SESSION 'jpviso','CONTRASENIA'
----------------------------------------------
--Procedimiento para añadir un REPORTE
CREATE PROCEDURE PRO_ADDREPORT (
	@UBI VARCHAR(100),
	@NOMBRE VARCHAR (80),
	@DETALLE VARCHAR(MAX),
	@FECHA DATE,
	@TIPO VARCHAR(10)
)
AS
BEGIN
	IF @NOMBRE = '' OR @DETALLE = ''
	BEGIN
		RAISERROR ('ERROR ELEMENTOS INCOMPLETOS', 16,1);
		RETURN;
	END
	
	INSERT INTO TB_REPORTES (UBICACION_REPORT, NOMBRE_ARCHIVO, DETALLES, FECHA, TIPO)
	VALUES (@UBI, @NOMBRE, @DETALLE, @FECHA, @TIPO)
END;

EXEC PRO_ADDREPORT 'ALGUN LUGAR','VACIADO CALLE 8', 'NO NOTIFICA QUE SE VACIO', '2023-10-12', 'DAÑO'

--Procedimiento para editar un reporte
CREATE PROCEDURE PRO_EDITREPORT (
	@ID INT,
	@UBI VARCHAR(100),
	@NOMBRE VARCHAR (80),
	@DETALLE VARCHAR(MAX),
	@FECHA DATE,
	@TIPO VARCHAR(10)
)
AS
BEGIN
	IF @ID = ''
	BEGIN
		RAISERROR('SIN IDENTIFICADOR', 16, 1);
		RETURN;
	END
	UPDATE TB_REPORTES SET
	UBICACION_REPORT = @UBI,
	NOMBRE_ARCHIVO = @NOMBRE,
	DETALLES = @DETALLE,
	FECHA = @FECHA,
	TIPO = @TIPO
	WHERE ID_REPORT = @ID
END;

EXEC PRO_EDITREPORT 1, 'OTRO LUGAR','VACIADO CALLE 8', 'NO NOTIFICA QUE SE VACIO', '2023-10-12', 'DAÑO'

--Procedimiento para eliminar registro de la table reporte
CREATE PROCEDURE PRO_DELEREPORT(
	@ID INT
)
AS
BEGIN
	IF @ID = ''
	BEGIN
		RAISERROR('ERROR DE IDENTIFICADOR', 16, 1);
		RETURN;
	END
	DELETE FROM TB_REPORTES WHERE ID_REPORT = @ID
END

--------------------------------------------
--Procedimiento para insertar nuevo usuario
CREATE PROCEDURE PRO_ADDUSER (
	@USERNAME VARCHAR(30),
	@PASS VARCHAR(20),
	@NOMBRE VARCHAR(100),
	@ROL SMALLINT
)
AS
BEGIN
	IF @USERNAME = '' OR @PASS = '' OR @NOMBRE = '' OR @ROL = ''
	BEGIN
		RAISERROR('ELEMENTO(S) FALTANTES', 16, 1);
		RETURN;
	END
	INSERT INTO TB_USUARIOS (USERNAME, PASSWD, NOMBRE, ROL)
	VALUES (@USERNAME, @PASS, @NOMBRE, @ROL)
END

EXEC PRO_ADDUSER 'carzon', 'contra', 'Carla Garzon', '2'
--Procedimiento para editar datos de un usuario
CREATE PROCEDURE PRO_EDITUSER (
	@ID INT,
	@USERNAME VARCHAR(30),
	@PASS VARCHAR(20),
	@NOMBRE VARCHAR(100),
	@ROL SMALLINT
)
AS
BEGIN
	IF @ID = ''
	BEGIN
		RAISERROR('DATOS FALTANTES', 16, 1);
		RETURN;
	END
	UPDATE TB_USUARIOS SET
	NOMBRE = @NOMBRE,
	USERNAME = @USERNAME,
	PASSWD = @PASS,
	ROL = @ROL
	WHERE ID_USUARIO = @ID
END
EXEC PRO_EDITUSER 5,'carvisor', 'contra', 'Carla Garzon', '1'

--Procedimiento para eliminar un usuario
CREATE PROCEDURE PRO_DELEUSER(
	@ID INT
)
AS
BEGIN
	IF @ID = ''
	BEGIN
		RAISERROR('ERROR DE DATOS', 16, 1);
		RETURN;
	END
	DELETE FROM TB_USUARIOS WHERE ID_USUARIO = @ID
END

EXEC PRO_DELEUSER 5
--------------------------------
--Procedimiento añadir nuevo basurero
CREATE PROCEDURE PRO_ADDBASU (
	@UBI VARCHAR(200),
	@COOR VARCHAR(100),
	@TIPO SMALLINT,
	@CONT TINYINT
)
AS
BEGIN
	IF @UBI = '' OR @COOR = '' OR @TIPO = ''
	BEGIN
		RAISERROR('ARGUMENTOS FALTANTES', 16, 1);
	END
	INSERT INTO TB_BASUREROS (DETALLE_UBICACION, COORDENADAS, TIPO_BASURERO, NUM_CONTENEDORES)
	VALUES (@UBI, @COOR, @TIPO, @CONT)
END

EXEC PRO_ADDBASU 'EN ALGUN LUGAR ENCONTRABLE', '54.2341456-86.25625766', '1', '1'

-- Procedimiento para editar el registro de un basurero
CREATE PROCEDURE PRO_EDITBASU (
	@ID INT,
	@UBI VARCHAR(200),
	@COOR VARCHAR(100),
	@TIPO SMALLINT,
	@CONT TINYINT
)
AS
BEGIN
	IF @ID = ''
	BEGIN
		RAISERROR('IDENTIFICADOR INVALIDO', 16, 1);
		RETURN;
	END
	UPDATE TB_BASUREROS SET
	NUM_CONTENEDORES = @CONT,
	DETALLE_UBICACION = @UBI,
	COORDENADAS = @COOR,
	TIPO_BASURERO = @TIPO
	WHERE ID_BASURERO = @ID
END;

EXEC PRO_EDITBASU 3, 'EN ALGUN LUGAR', '54.2341456-86.25625766', '1', '2' 

--Procedimiento para eliminar un registro de basurero
CREATE PROCEDURE PRO_DELEBASU (
	@ID INT
)
AS
BEGIN
	IF @ID = ''
	BEGIN
		RAISERROR('ERROR DE IDENTIFICADOR', 16, 1);
		RETURN;
	END
	DELETE FROM TB_BASUREROS WHERE ID_BASURERO = @ID
END

EXEC PRO_DELEBASU 3
--------------------------------
SELECT * FROM TB_REPORTES
SELECT * FROM TB_DATA_HISTORICA
SELECT * FROM TB_USUARIOS
SELECT * FROM TB_BASUREROS


---------------------------------------------------------------
-----Vistas de usuarios
--Lista usuarios
CREATE VIEW V_LISTAUSER
AS
SELECT ID_USUARIO, NOMBRE FROM TB_USUARIOS

SELECT * FROM V_LISTAUSER

--Usuario a editar
CREATE PROCEDURE PRO_SELECUSER (
	@ID INT
)
AS
BEGIN
	IF @ID = ''
	BEGIN
		RAISERROR('NO SE ENCONTRO', 16, 1);
		RETURN;
	END
	SELECT NOMBRE, USERNAME, PASSWD, ROL FROM TB_USUARIOS
	WHERE ID_USUARIO = @ID
END

EXEC PRO_SELECUSER '2'

------Vistas de basureros
--Edicion de registro de basurero
CREATE PROCEDURE PRO_SELECBASU (
	@ID INT
)
AS
BEGIN
	IF @ID = ''
	BEGIN
		RAISERROR('NO ENCONTRADO', 16, 1);
		RETURN;
	END
	SELECT * FROM TB_BASUREROS WHERE ID_BASURERO = @ID
END

EXEC PRO_SELECBASU 2

-----Vistas de reporte
--vista de reportes
CREATE VIEW V_REPORTES
AS
SELECT ID_REPORT, NOMBRE_ARCHIVO, DETALLES, FECHA FROM TB_REPORTES

--Vista para edicion
CREATE PROCEDURE PRO_SELECREPORT (
	@ID INT
)
AS
BEGIN
	IF @ID = ''
	BEGIN
		RAISERROR('NO ENCONTRADO', 16, 1);
		RETURN;
	END
	SELECT * FROM TB_REPORTES WHERE ID_REPORT = @ID
END

EXEC PRO_SELECREPORT 1

--Vista para coordenadas del basureros
CREATE VIEW V_BASUCOORD
AS
SELECT ID_BASURERO, DETALLE_UBICACION, COORDENADAS, NUM_CONTENEDORES FROM TB_BASUREROS

SELECT * FROM V_BASUCOORD

DELETE FROM TB_DATA_HISTORICA WHERE ID_BASURERO = 2